#!/usr/bin/env ruby

require 'geocoder'
require 'chronic'

module GpxToCsv
  extend self
  def convert(source_path)

    @total_distance = 0
    output_path = "#{source_path[0..-5]}.csv"
    @output_file = File.new(output_path, "w")

    def write_to_csv(latitude="latitude",longitude="longitude",elevation="elevation",velocity="velocity",distance="distance",date="date",time="time",elapsed_time="elapsed_time")
      @output_file.write("#{latitude},#{longitude},#{elevation},#{velocity},#{distance},#{date},#{time},#{elapsed_time}\n")
    end

    write_to_csv

    def set_velocity(lat, lng, date_time, last_lat, last_lng, last_date_time)
        distance = Geocoder::Calculations.distance_between([lat, lng],[last_lat, last_lng], options = {units: :mi})
        @total_distance += distance
        time = ((date_time - last_date_time) / 3600)
        distance / time
    end

    def set_elapsed_time(time)
      @start ||= time
      return time - @start
    end

    File.readlines(source_path).each do |line|

      if match_lat_lng = line.match(/lat="(.*)".*lon="(.*)"/)
        @lat, @lng = match_lat_lng.captures
      elsif match_ele = line.match(/<ele>(.*)<\/ele>/)
        @ele = match_ele.captures[0].to_f * 3.28084
      elsif match_date_and_time = line.match(/<time>(.*)[a-zA-Z](.*)[a-zA-Z]<\/time>/)
        @date, @time = match_date_and_time.captures
        @date_time = Chronic.parse("#{@date} #{@time}")
        if @last_lat && @last_lng && @last_date_time && (@last_date_time != @date_time)
          @velocity = set_velocity(@lat, @lng, @date_time, @last_lat, @last_lng, @last_date_time)
        end
        @elapsed_time = set_elapsed_time(@date_time)
        write_to_csv(@lat, @lng, @ele, @velocity, @total_distance, @date, @time, @elapsed_time)
        @last_lat, @last_lng, @last_date_time = @lat, @lng, @date_time 
      end
    end
  end
end

if ARGV[0] == "--help" || ARGV[0] == "-h"
  puts "Usage:"
  puts "  sports_tracker_gpx_to_csv [FILENAME]\n\n"
  puts "Description:"
  puts "  Will convert a .gpx file exported from sports-tracker.com into a .csv file."
elsif ARGV[0]
  GpxToCsv.convert(ARGV[0])
else
  puts "Error: no file was specified"
  puts "Options are..."
  puts "  sports_tracker_gpx_to_csv [FILENAME]"
  puts "  sports_tracker_gpx_to_csv --help"
end
